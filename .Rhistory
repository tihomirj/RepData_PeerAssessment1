dir()
pnorm(0.81,3,0.246)
1-pnorm(0.81,3,0.246)
1-pnorm(3.2,3,0.246)
1-pnorm(0.81,0,1)
pnorm(168,0,1)
9.4/sqrt(507)
qnorm(0.01)
pnorn(1.8237,0,1)
pnorm(1.8237,0,1)
1-pnorm(1.8237,0,1)
2*(1-pnorm(1.8237,0,1))
2*(1-pnorm(1.824,0,1))
2*(1-pnorm(1.825,0,1))
2*(1-pnorm(1.8236659,0,1))
2*(1-pnorm(1.392,0,1))
qnorm(0.025)
qnorm(0.05)
pnorm(-0.666,0,1)
4.65/(sqrt(40))
(9.51-10)/0.7352296
pnorm(-0.6664585,0,1)
qnorm((1-0.95)/2)
qnorm((1-0.80)/2)
pnorm(-1.28)
qnorm(0.25)
pnorm(0.6744898)
qnorm(0.1)
qt(0.025,df=21)
2*pt(2.30, df = 21, lower.tail = FALSE)
pt(-2.30, df = 21)
2*pt(-2.30, df = 21)
1-pt(2.30, df = 21)
2*(1-pt(2.30, df = 21))
pt(-2.24,df=21)
2*pt(-2.24,df=21)
qt(-0.025, df=21)
qt(0.025, df=21)
qt(0.025, df=24)
pt(-1.71, df=24)
pt(-1.32, df=24)
pt(1.32, df=24)
pt(1.32, df=25)
pt(1.32, df=25)
pt(1.32, df=35)
1-pt(1.32, df=50)
1-pt(1.32, df=5)
1-pt(1.32, df=5)
1-pt(1.32, df=55)
1-pt(1.32, df=55)
1-pt(1.32, df=2)
1-pt(1.32, df=29)
pt(-1.71000000001, df=24)
pt(-1.71003, df=24)
pt(-1.33, df=24)
1-pt(1.33, df=24)
1-pt(1.71, df=24)
1-pt(0.5, df=17)
pt(0.5, df=17,lower.tail=FALSE)
?pt
?anova
pnorm(-2.36,0,1)
pnorm(-1.18,0,1)
pnorm(-1.74,0,1)
sum(dbinom(1:5,5,0.1))
dbinom(0,5,0.1)
1-dbinom(0,5,0.1)
sum(dbinom(2:10,10,0.1))
sum(dbinom(3:15,15,0.1))
sum(dbinom(4:20,20,0.1))
pnorm(-1.96.0.1)
pnorm(-1.96,0,1)
sum(dbinom(1:4,n=4,p=0.11))
sum(dbinom(1:4,size=4,p=0.11))
sum(dbinom(1:4,size=4,p=0.12))
sum(dbinom(0,size=4,p=0.88))
1-dbinom(0,size=4,p=0.88)
1-dbinom(0,size=4,p=0.12)
qnorm((1-0.98)/2)
setwd("C:/Users/Tihomir/Dropbox/DataScience/Coursera/05-ReproducibleResearch/Project1/RepData_PeerAssessment1")
install.packages("data.table")
steps_per_day
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
rdata <- read.csv('activity.csv', header = TRUE, sep = ",",
colClasses=c("numeric", "character", "numeric"))
rdata$date <- as.Date(rdata$date, format = "%Y-%m-%d")
rdata$interval <- as.factor(rdata$interval)
steps_per_day <- aggregate(steps ~ date, rdata, sum)
colnames(steps_per_day) <- c("date","steps")
head(steps_per_day)
View(steps_per_day)
View(steps_per_day)
hist(step)
hist(steps_per_day$steps)
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
library(knitr)
library(data.table)
library(ggplot2)
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
ggplot(steps_per_interval, aes(x=interval, y=steps)) +
geom_line(color="orange", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw()
View(steps_per_interval)
max_interval <- steps_per_interval[which.max(
steps_per_interval$steps),]
max_interval
max_interval <- steps_per_interval[which.max(
steps_per_interval$steps),]
max_interval$interval
max_pos <- which(steps_per_interval$steps == max(steps_per_interval$steps))
steps_per_interval[max_pos,1]
steps_per_interval[max_pos,2]
View(steps_per_interval)
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
str()
str(steps_per_interval)
steps_per_interval$interval <-
as.integer(steps_per_interval$interva)
str(steps_per_interval)
levels(steps_per_interval$interval)[steps_per_interval$interval]
?unlist
FillMissing <- function(data, pervalue) {
na_index <- which(is.na(data$steps))
na_replace <- unlist(lapply(na_index, FUN=function(idx){
interval = data[idx,]$interval
pervalue[pervalue$interval == interval,]$steps
}))
fill_steps <- data$steps
fill_steps[na_index] <- na_replace
fill_steps
}
rdata_fill <- data.frame(
steps = FillMissing(rdata, steps_per_interval),
date = rdata$date,
interval = rdata$interval)
str(rdata_fill)
?laply
?lapply
?scipen
??scipen
?weekdays
day <- weekdays(rdata$date)
daylevel <- vector()
for (i in 1:nrow(rdata)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
rdata$daylevel <- daylevel
rdata$daylevel <- factor(rdata$daylevel)
View(rdata)
str(rdata)
day
?weekdays
?Sys.setlocale
Sys.getlocale(category = "LC_ALL")
View(rdata)
day
Sys.setlocale("LC_ALL","English")
day <- weekdays(rdata$date)
daylevel <- vector()
for (i in 1:nrow(rdata)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
str(daylevel)
View(rdata)
str(rdata)
unique(day)
unique(daylevel)
Sys.setlocale("LC_ALL","English")
day <- weekdays(rdata$date)
daylevel <- vector()
for (i in 1:nrow(rdata)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
rdata$daylevel <- daylevel
rdata$daylevel <- factor(rdata$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = rdata, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
#xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
#xlab = "Interval", ylab = "Number of steps")
ggplot(stepsByDay, aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~ daylevel, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
View(stepsByDay)
install.packages("lattice")
Sys.setlocale("LC_ALL","English")
day <- weekdays(rdata$date)
daylevel <- vector()
for (i in 1:nrow(rdata)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
rdata$daylevel <- daylevel
rdata$daylevel <- factor(rdata$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = rdata, mean)
names(stepsByDay) <- c("interval", "daylevel", "steps")
#library(lattice)
#xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
#xlab = "Interval", ylab = "Number of steps")
ggplot(stepsByDay, aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~daylevel, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
Sys.setlocale("LC_ALL","English")
day <- weekdays(rdata$date)
daylevel <- vector()
for (i in 1:nrow(rdata)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
rdata$daylevel <- daylevel
rdata$daylevel <- factor(rdata$daylevel)
stepsByDay <- aggregate(steps ~ interval + daylevel, data = rdata, mean)
#names(stepsByDay) <- c("interval", "daylevel", "steps")
#library(lattice)
#xyplot(steps ~ interval | daylevel, stepsByDay, type = "l", layout = c(1, 2),
#xlab = "Interval", ylab = "Number of steps")
ggplot(stepsByDay, aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~daylevel, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
View(stepsByDay)
str(stepsByDay)
?aggregate
View(steps_per_day)
